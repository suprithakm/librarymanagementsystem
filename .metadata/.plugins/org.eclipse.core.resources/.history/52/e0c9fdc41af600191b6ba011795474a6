package com.capgemini.librarymanagementsystem.controller;

import java.util.List;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class LibrarianController {

	
	
	@PostMapping(path="/addBooks",
			consumes = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE}, produces =
				{ MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}

			)
	@ResponseBody
	public Response addOwnerUser(@RequestBody Login login) {

		loginResponse response=new loginResponse();
		if(serviceAdmin.addLogin(login)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee added successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to add employee");
		}
		return response;
	}//end of addOwnerUser
	
	
	
	@DeleteMapping("/deleteUser/{id}")
	@ResponseBody
	public loginResponse deleteUser(@PathVariable(name="id") int id) {
		//map only through some 
		loginResponse response=new loginResponse();
		if(serviceCustomer.deleteUser(id)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("User deleted successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to delete employee");
		}
		return response;
	}//end of deleteUser
	
	
	@DeleteMapping("/deleteOwner/{id}")
	@ResponseBody
	public loginResponse deleteOwner(@PathVariable(name="id") int id) {
		//map only through some 
		loginResponse response=new loginResponse();
		if(serviceAdmin.deleteOwner(id)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Owner deleted successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to delete employee");
		}
		return response;
	}//end of deleteOwner
	
	
	@PutMapping("/updateLogin")
	public loginResponse updateEmployee(@RequestBody Login login) {

		loginResponse response=new loginResponse();
		
		if(serviceAdmin.updateLogin(login)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee updated successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to add employee");
		}
		return response;
	}//end of updateLogin
	
	
	@GetMapping(path="/getAllUsers", 
			produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	public loginResponse getAllUsers(){
		List<Login> loginList= serviceAdmin.displayCustomers();
		loginResponse response=new loginResponse();
		if(loginList!=null) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee details fetched successfully");
			response.setloginList(loginList);
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to fetch employee list");
		}
		return response;
	}//end of getAllUsers
}
