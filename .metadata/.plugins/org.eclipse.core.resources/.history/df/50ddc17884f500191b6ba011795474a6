package com.capgemini.librarymanagementsystem.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

import com.capgemini.librarymanagementsystem.beans.BooksInventory;
import com.capgemini.librarymanagementsystem.beans.BooksRegistration;
import com.capgemini.librarymanagementsystem.beans.BooksTransaction;

@Repository
public class LibrarianDAOImpl implements LibrarianDAO{

	@PersistenceUnit
	EntityManagerFactory entityManagerFactory;
	
	@Override
	public boolean addBooks(BooksInventory books) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		transaction.begin();
		boolean isAdded=false;
		try {
				entityManager.persist(books);
				transaction.commit();
				isAdded=true;
		} catch(Exception e) {
			e.printStackTrace();
		}
		entityManager.close();
		return isAdded;
	}//end of addBooks

	@Override
	public boolean updateBooks(BooksInventory books) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		transaction.begin();

		BooksInventory bookPresent=entityManager.find(BooksInventory.class,books.getBookId());
		try {

			bookPresent.setBookName(books.getBookName());
			bookPresent.setAuthor1(books.getAuthor1());
			bookPresent.setAuthor2(books.getAuthor2());
			bookPresent.setBookId(books.getBookId());
			bookPresent.setPublisher(books.getPublisher());
			bookPresent.setYearOfPublication(books.getYearOfPublication());

			transaction.commit();
			return true;

		}catch (Exception e) {
			e.printStackTrace();
		}
		entityManager.close();
		return false;
	}//end of updateBooks

	@Override
	public boolean deleteBooks(int bookId) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		transaction.begin();
		BooksInventory book=entityManager.find(BooksInventory.class, bookId);
		try {
			
			entityManager.remove(book);
			transaction.commit();
			entityManager.close();
			return true;			
		} catch (Exception e) {
			entityManager.close();
			e.printStackTrace();
		}
		return false;
	}//end of deleteBooks

	@Override
	public List<BooksTransaction> showAllIssuedBooks(int userId) {
		
		EntityManager entityManager=entityManagerFactory.createEntityManager();

		String viewBusDetails="from Bus where source=:source and destination=:destination";
		Query query=entityManager.createQuery(viewBusDetails);
		query.setParameter("source",source);
		query.setParameter("destination", destination);
		
		List<Bus> busDetails=query.getResultList();
		
		String viewAvailability="from Availability where busId=:busId and availDate=:journeyDate";
		query=entityManager.createQuery(viewAvailability);
		List<Availability> availDetails=null;
		
		List<Availability> resultSet=new ArrayList<Availability>();
		
		if(busDetails.size()>0) {
			for(Bus bus : busDetails) {
				query.setParameter("busId", bus.getBusId());
				query.setParameter("journeyDate", journeyDate);
				availDetails=query.getResultList();
				resultSet.addAll(availDetails);
			}
		}
		
		List<Bus> busData=new ArrayList<Bus>();
		
		for(Availability availability:resultSet) {
			for(Bus bus:busDetails) {
				if(bus.getBusId()==availability.getBusId()) {
					bus.setTotalSeats(availability.getAvailSeat());
					busData.add(bus);
				}
			}
		}
		
		return busData;
	}

	@Override
	public List<BooksRegistration> showAllRequests() {
		// TODO Auto-generated method stub
		return null;
	}

}
