package com.capgemini.librarymanagementsystem.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import com.capgemini.librarymanagementsystem.dao.CommonDAO;
import com.capgemini.librarymanagementsystem.service.AdminService;
import com.capgemini.librarymanagementsystem.service.CommonService;
import com.capgemini.librarymanagementsystem.service.LibrarianService;
import com.capgemini.librarymanagementsystem.service.StudentService;
import com.capgemini.librarymanagementsystem.utility.Response;

@Controller
public class AdminController {

	@Autowired
	CommonService serviceCommon;
	
	@GetMapping("/login")
	@ResponseBody
	public loginResponse login(int id,String password) {
		
		loginResponse response=new loginResponse();
		Login login=serviceAdmin.login(id, password);
		if(login!=null) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee details successfully");
			//to set all the values
			response.setlogin(login);
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to search employee");
		}
		return response;
	}//end of login
	
	
	
	@PostMapping(path="/addLogin",
			consumes = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE}, produces =
				{ MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}

			)
	@ResponseBody
	public loginResponse addOwnerUser(@RequestBody Login login) {

		loginResponse response=new loginResponse();
		if(serviceAdmin.addLogin(login)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee added successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to add employee");
		}
		return response;
	}//end of addOwnerUser
	
	
	
	@DeleteMapping("/deleteUser/{id}")
	@ResponseBody
	public loginResponse deleteUser(@PathVariable(name="id") int id) {
		//map only through some 
		loginResponse response=new loginResponse();
		if(serviceCustomer.deleteUser(id)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("User deleted successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to delete employee");
		}
		return response;
	}//end of deleteUser
	
	
	@DeleteMapping("/deleteOwner/{id}")
	@ResponseBody
	public loginResponse deleteOwner(@PathVariable(name="id") int id) {
		//map only through some 
		loginResponse response=new loginResponse();
		if(serviceAdmin.deleteOwner(id)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Owner deleted successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to delete employee");
		}
		return response;
	}//end of deleteOwner
	
	
	@PutMapping("/updateLogin")
	public loginResponse updateEmployee(@RequestBody Login login) {

		loginResponse response=new loginResponse();
		
		if(serviceAdmin.updateLogin(login)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee updated successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to add employee");
		}
		return response;
	}//end of updateLogin
	
	
	@GetMapping(path="/getAllUsers", 
			produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	public loginResponse getAllUsers(){
		List<Login> loginList= serviceAdmin.displayCustomers();
		loginResponse response=new loginResponse();
		if(loginList!=null) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee details fetched successfully");
			response.setloginList(loginList);
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to fetch employee list");
		}
		return response;
	}//end of getAllUsers
	
	
	
	@GetMapping(path="/getAllOwners", 
			produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	public loginResponse getAllOwners(){
		List<Login> loginList= serviceAdmin.displayOwners();
		loginResponse response=new loginResponse();
		if(loginList!=null) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee details fetched successfully");
			response.setloginList(loginList);
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to fetch employee list");
		}
		return response;
	}//end of getAllOwners
	
	
	@GetMapping("/getUser")
	@ResponseBody
	public loginResponse getUser(int id) {
		
		loginResponse response=new loginResponse();
		Login login=serviceCustomer.updateCheckCustomer(id);
		if(login!=null) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee details successfully");
			//to set all the values
			response.setlogin(login);
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to search employee");
		}
		return response;
	}//end of getUser
	
	
	
	
	@GetMapping(path="/getAllFeedbacks", 
			produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	public feedbackResponse getAllFeedbacks(){
		List<Feedback> feedbackList= serviceAdmin.displayFeedbacks();
		feedbackResponse response=new feedbackResponse();
		if(feedbackList!=null) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee details fetched successfully");
			response.setfeedbackList(feedbackList);
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to fetch employee list");
		}
		return response;
	}//end of getAllFeedbacks
	
	@PostMapping(path="/addBus",
			consumes = {MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE}, produces =
				{ MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}

			)
	@ResponseBody
	public busResponse addBus(@RequestBody Bus bus) {

		busResponse response=new busResponse();
		if(serviceOwner.addBus(bus)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Employee added successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to add employee");
		}
		return response;
	}//end of addBus
	

	@DeleteMapping("/deleteBus/{busId}")
	@ResponseBody
	public busResponse deleteBus(@PathVariable(name="busId") int busId) {
		//map only through some 
		busResponse response=new busResponse();
		if(serviceOwner.deleteBus(busId)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Bus deleted successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to delete bus");
		}
		return response;
	}//end of deleteBus
	
	
	@PutMapping("/updateBus")
	public busResponse updateBus(@RequestBody Bus bus) {

		busResponse response=new busResponse();
		
		if(serviceOwner.updateBus(bus)) {
			response.setStatusCode(201);
			response.setMessage("Success");
			response.setDescription("Bus updated successfully");
		}else {
			response.setStatusCode(401);
			response.setMessage("Failed");
			response.setDescription("Unable to update bus record");
		}
		return response;
	}//end of updateBus
	
	
	
}
