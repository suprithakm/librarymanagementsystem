package com.capgemini.librarymanagementsystem.dao;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.capgemini.librarymanagementsystem.beans.Users;

@Repository
public class AdminDAOImpl implements AdminDAO{

	@PersistenceUnit
	EntityManagerFactory entityManagerFactory;

	@Override
	public boolean addLibrarian(Users users) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		boolean isadded=false;
		try {
			users.setType("librarian");
			transaction.begin();
			entityManager.persist(users);
			transaction.commit();
			isadded=true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		entityManager.close();
		return isadded;
	}//end of add librarian

		

	@Override
	public boolean updateLibrarian(Users users) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		boolean isadded=false;
		try {
			Users user=searchStudentById(users.getUserId());
			if(user==null) {
				return isadded;
			}else if( user.getType()!="librarian") {
				return isadded;
			}else {
				transaction.begin();
				entityManager.merge(users);
				transaction.commit();
				 isadded=true;
			}
		}catch(Exception e) {
			transaction.rollback();
			return isadded;
		}
		entityManager.close();
		return isadded;
	}//end of update librarian

	@Override
	public boolean deleteLibrarian(String userId) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		try {
		Users user=null;
		user=entityManager.find(Users.class, userId);
			if(user==null) {
				return false;
			}else if(user.getType()!="librarian"){
				return false;
			}
			else {
				transaction.begin();
				entityManager.remove(user);
				transaction.commit();
				
			}
		}catch(Exception e) {
			transaction.rollback();
			return false;
		}
		entityManager.close();
		return true;
		}//end of delete

	@Override
	public boolean addStudent(Users users) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		boolean isadded=false;
		try {
			users.setType("student");
			transaction.begin();
			entityManager.persist(users);
			transaction.commit();
			isadded=true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		entityManager.close();
		return isadded;
	}//end of add student


	@Override
	public boolean updateStudent(Users users) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		boolean isadded=false;
		try {
			Users user=searchStudentById(users.getUserId());
			if(user==null) {
				return isadded;
			}else if( user.getType()!="student") {
				return isadded;
			}else {
				transaction.begin();
				entityManager.merge(users);
				transaction.commit();
				 isadded=true;
			}
		}catch(Exception e) {
			transaction.rollback();
			return isadded;
		}
		entityManager.close();
		return isadded;
	}//end of update Student

	@Override
	public boolean deleteStudent(String userId) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		try {
		Users user=null;
		user=entityManager.find(Users.class, userId);
			if(user==null) {
				return false;
			}else if(user.getType()!="student"){
				return false;
			}
			else {
				transaction.begin();
				entityManager.remove(user);
				transaction.commit();
				
			}
		}catch(Exception e) {
			transaction.rollback();
			return false;
		}
		entityManager.close();
		return true;
		}//end of delete



	@Override
	public List<Users> showAllStudent() {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		
		String jpql="from Users where type='student'";
		Query query=entityManager.createQuery(jpql);
		List<Users> arraylist=new ArrayList<Users>();
		List<Users> allStudent=null;
				try {
					allStudent=query.getResultList();
				} catch (Exception e) {
					e.printStackTrace();
				}
				entityManager.close();
				return allStudent;
		
	}

	@Override
	public List<Users> showLibrarian() {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=entityManager.getTransaction();
		
		String jpql="from Users where type='librarian'";
		Query query=entityManager.createQuery(jpql);
		List<Users> arraylist=new ArrayList<Users>();
		List<Users> allLibrarian=null;
				try {
					allLibrarian=query.getResultList();
				} catch (Exception e) {
					e.printStackTrace();
				}
				entityManager.close();
				return allLibrarian;
		
	}
	


	@Override
	public Users searchStudentById(String userId) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		Users user=null;
		user=entityManager.find(Users.class, userId);
				if(user!=null ) {	
				}else if(user.getType()!="student") {
				}else {
					return user;
				}
				entityManager.close();
				return user;
	}//end of search student


	@Override
	public Users searchLibrarian(String userId) {
		EntityManager entityManager=entityManagerFactory.createEntityManager();
		Users user=null;
		user=entityManager.find(Users.class, userId);
				if(user!=null ) {	
				}else if(user.getType()!="librarian") {
				}else {
					return user;
				}
				entityManager.close();
				return user;
	}//end of search student


	


}//end of AdminDAOImpl
